// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    address public owner;
    mapping(address => bool) public voters;
    mapping(uint256 => Candidate) public candidates;
    uint256 public candidateCount;
    bool public votingEnded;

    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
    }

    // Event to emit when a candidate is proposed
    event CandidateProposed(uint256 id, string name);

    // Event to emit when a vote is cast
    event VoteCast(uint256 candidateId, address voter);

    // Modifier to restrict access to the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // Modifier to ensure voting is active
    modifier votingActive() {
        require(!votingEnded, "Voting has ended");
        _;
    }

    constructor() {
        owner = msg.sender;
        votingEnded = false;
    }

    // Function to propose a new candidate
    function proposeCandidate(string memory name) public onlyOwner {
        require(bytes(name).length > 0, "Candidate name is required");

        candidateCount++;
        candidates[candidateCount] = Candidate(candidateCount, name, 0);

        emit CandidateProposed(candidateCount, name);
    }

    // Function to vote for a candidate
    function vote(uint256 candidateId) public votingActive {
        require(!voters[msg.sender], "You have already voted");
        require(candidateId > 0 && candidateId <= candidateCount, "Invalid candidate ID");

        voters[msg.sender] = true;
        candidates[candidateId].voteCount++;

        assert(voters[msg.sender] == true);

        emit VoteCast(candidateId, msg.sender);
    }

    // Function to end voting
    function endVoting() public onlyOwner {
        votingEnded = true;
    }

    // Function to reset the voting system (only the owner can reset)
    function resetVoting() public onlyOwner {
        if (!votingEnded) {
            revert("Cannot reset during active voting");
        }

        for (uint256 i = 1; i <= candidateCount; i++) {
            delete candidates[i];
        }
        for (address voter = address(0); voter <= address(type(uint160).max); voter) {
            if (voters[voter]) {
                delete voters[voter];
            }
        }
        candidateCount = 0;
        votingEnded = false;
    }
}
