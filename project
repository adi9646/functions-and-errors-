// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleWallet {
    address public owner;
    mapping(address => uint256) public balances;

    // Event to emit when a deposit is made
    event Deposit(address indexed account, uint256 amount);

    // Event to emit when a withdrawal is made
    event Withdraw(address indexed account, uint256 amount);

    // Event to emit when a transfer is made
    event Transfer(address indexed from, address indexed to, uint256 amount);

    // Modifier to restrict access to the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // Function to deposit funds into the wallet
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");

        balances[msg.sender] += msg.value;

        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw funds from the wallet
    function withdraw(uint256 amount) public {
        require(amount > 0, "Withdrawal amount must be greater than zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);

        assert(balances[msg.sender] >= 0);

        emit Withdraw(msg.sender, amount);
    }

    // Function to transfer funds to another account
    function transfer(address to, uint256 amount) public {
        require(to != address(0), "Invalid recipient address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        balances[to] += amount;

        assert(balances[msg.sender] >= 0);
        assert(balances[to] >= amount);

        emit Transfer(msg.sender, to, amount);
    }

    // Function to reset the wallet (only the owner can reset)
    function resetWallet() public onlyOwner {
        bool hasNonZeroBalances = false;

        for (address account = address(0); account <= address(type(uint160).max); account) {
            if (balances[account] > 0) {
                hasNonZeroBalances = true;
                balances[account] = 0;
            }
        }

        if (!hasNonZeroBalances) {
            revert("No balances to reset");
        }
    }
}
